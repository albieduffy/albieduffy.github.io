{"version":3,"sources":["Components/About/About.js","Components/Blogs/Blogs.js","Components/Projects/Projects.js","Components/Private/Private.js","Actions/PortfolioActions.js","App.js","serviceWorker.js","Reducers/PortfolioReducer.js","store.js","index.js"],"names":["About","className","data-icon","data-width","data-height","Blogs","renderBlogs","blogs","map","blog","index","key","title","post","created","slice","this","props","length","React","Component","connect","state","Projects","renderProjects","projects","project","src","image_url","href","url","Private","addBlogs","type","payload","addProjects","App","loadBlogs","loadProjects","to","exact","path","component","dispatch","a","fetch","response","json","console","warn","message","Boolean","window","location","hostname","match","initState","PortfolioReducer","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.76d5ee25.chunk.js","sourcesContent":["import React from 'react'\nimport './About.css'\n\nfunction About() {\n  return (\n    <div className='about'>\n      <div className='about-image'>\n      </div>\n      <div className='about-info'>\n        <div className='about-intro'>\n          <h3>Intro</h3>\n          <p>I am an Economics and Finance graduate from University of Bristol and a Software Engineer in Training at Futurepoof. In addition to Futureproof, I have played water polo for Great Britain and currently coach two highly successful teams at Imperial College London.</p>\n        </div>\n        <div className='about-skills'>\n          <h3>Skills</h3>\n          <div className='skill-icons'>\n            <i className=\"fab fa-html5 fa-5x\"></i>\n            <i className=\"fab fa-css3 fa-5x\"></i>\n            <i className=\"fab fa-js fa-5x\"></i>\n            <i className=\"fab fa-node-js fa-5x\"></i>\n            <i className=\"fab fa-react fa-5x\"></i>\n            <div className='icon-image'>\n            <iconify-icon data-icon=\"simple-icons:redux\" data-width=\"80\" data-height=\"80\"></iconify-icon>\n            </div>\n            <i className=\"fab fa-python fa-5x\"></i>\n            <div className='icon-image'>\n              <iconify-icon className='icon-image' data-icon=\"cib:flask\" data-width=\"80\" data-height=\"80\"></iconify-icon>\n            </div>\n            <div className='icon-image'>\n              <iconify-icon className='icon-image' data-icon=\"carbon:sql\" data-width=\"80\" data-height=\"80\"></iconify-icon>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default About;\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport './Blogs.css'\n\nclass Blogs extends React.Component {\n\n  renderBlogs = blogs => {\n    return blogs.map((blog, index) => {\n      return <div key={ index } className='blog-post'>\n          <h2>{blog.title}</h2>\n          <p>{blog.post}</p>\n          <h6>{blog.created.slice(0,16)}</h6>\n        </div>\n    })\n  }\n\n  render() {\n    return (\n      <div className='blogs'>\n        {this.props.blogs.length > 0 ? this.renderBlogs(this.props.blogs) : 'No posts to see!'}\n      </div>\n    )\n  }\n}\n\nconst mSTP = state => ({\n  blogs: state.blogs\n})\n\nexport default connect(mSTP)(Blogs);\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport './Projects.css'\n\nclass Projects extends React.Component {\n\n  renderProjects = projects => {\n    return projects.map((project, index) => {\n      return <div key={index} className='project-card'>\n        <img src={project.image_url} />\n        <a href={project.url}><h3>{project.title}</h3></a>\n      </div>\n    })\n  }\n\n  render() {\n    return (\n      <div className='projects'>\n        {this.props.projects.length > 0 ? this.renderProjects(this.props.projects) : 'No projects to see!'}\n      </div>\n    )\n  }\n}\n\nconst mSTP = state => ({\n  projects: state.projects\n})\n\nexport default connect(mSTP)(Projects)\n","import React from 'react';\n\nclass Private extends React.Component {\n  render() {\n    return (\n      <>\n      You're not supposed to be here.\n      </>\n    )\n  }\n}\n\nexport default Private;\n","const url = 'https://albieduffy-portfolio.herokuapp.com'\n\nconst addBlogs = (blogs) => ({\n  type: 'ADD_BLOG',\n  payload: blogs\n})\n\nconst addProjects = (projects) => ({\n  type: 'ADD_PROJECT',\n  payload: projects\n})\n\nexport const fetchBlogs = () => {\n  return async dispatch => {\n    try {\n      const response = await fetch(`${url}/blogs`)\n      const blogs = await response.json()\n      dispatch(addBlogs(blogs))\n    } catch (err) {\n      console.warn(err.message)\n    }\n  }\n}\n\nexport const fetchProjects = () => {\n  return async dispatch => {\n    try {\n      const response = await fetch(`${url}/projects`)\n      const projects = await response.json()\n      dispatch(addProjects(projects))\n    } catch (err) {\n      console.warn(err.message)\n    }\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport { connect } from 'react-redux'\nimport { Switch, Route, NavLink } from 'react-router-dom';\nimport { About, Projects, Blogs, Private } from './Components/index.js'\nimport { fetchBlogs, fetchProjects } from './Actions/PortfolioActions'\n\nclass App extends React.Component {\n\n  componentDidMount() {\n    this.props.loadBlogs()\n    this.props.loadProjects()\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <nav className='nav-bar'>\n          <div className='page-links'>\n            <h1>Albie Duffy</h1>\n            <NavLink to='/'>About</NavLink>\n            <NavLink to='/projects'>Projects</NavLink>\n            <NavLink to='/blog'>Blog</NavLink>\n          </div>\n          <div className='social-links'>\n            <ul>\n              <li><a href=\"https://github.com/albieduffy\"><i className=\"fab fa-github fa-lg\"></i></a></li>\n              <li><a href=\"https://www.linkedin.com/in/albieduffy/\"><i className=\"fab fa-linkedin fa-lg\"></i></a></li>\n              <li><a href=\"https://www.instagram.com/albieduffy/\"><i className=\"fab fa-instagram fa-lg\"></i></a></li>\n              <li><a href=\"/private\"><i className=\"fas fa-lock fa-lg\"></i></a></li>\n            </ul>\n          </div>\n        </nav>\n        <div className='main'>\n          <Switch>\n            <Route exact path='/' component={About} />\n            <Route path='/projects' component={Projects} />\n            <Route path='/blog' component={Blogs} />\n            <Route path='/private' component={Private} />\n          </Switch>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mDTP = dispatch => ({\n  loadBlogs: () => dispatch(fetchBlogs()),\n  loadProjects: () => dispatch(fetchProjects())\n})\n\nexport default connect(null, mDTP)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n  projects: [],\n  blogs: []\n}\n\nconst PortfolioReducer = (state = initState, action) => {\n  switch(action.type) {\n    case 'ADD_PROJECT':\n      return {...state, projects: action.payload}\n    case 'ADD_BLOG':\n      return {...state, blogs: action.payload}\n    default:\n      return state\n  }\n}\n\nexport default PortfolioReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport PortfolioReducer from './Reducers/PortfolioReducer';\n\nconst store = createStore(PortfolioReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}